# -*- coding: utf-8 -*-
"""LML_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xzp5dmFXxa2i5Q2M9FLU5F3B9JhkC51a
"""

# Creating a Vector
# Importing the Numpuy Library
import numpy as np

# Create a vector
vector_row = np.array([1, 2, 3])
vector_column = np.array([[1],
                      [2],
                      [3]])
print(vector_row)
print(vector_column)

# Create a Matrix
matrix = np.array([[1, 2],
                   [1, 2],
                   [1, 2]])
print(matrix)

# Creating a Sparse Matrix
# Create a Sparse Matrix
from scipy import sparse
matrix = np.array([[0, 0],
                   [0, 1],
                   [3, 0]])
matrix_sparse = sparse.csr_matrix(matrix)
print(matrix_sparse)

# Create larger matrix
matrix_large = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                         [3, 0, 0, 0, 0, 0, 0, 0, 0, 3]])
# Create compressed sparse row (CSR) matrix
matrix_large_sparse = sparse.csr_matrix(matrix_large)
# View original sparse matrix
print(matrix_sparse)
# View larger sparse matrix
print(matrix_large_sparse)

# Selecting Elements
# Load library
import numpy as np
# Create row vector
vector = np.array([1, 2, 3, 4, 5, 6])
# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])
# Select third element of vector
print(vector[2])

# Select second row, second column
print(matrix[1,1])

# Select all elements of a vector
print(vector[:])

# Select everything up to and including the third element
print(vector[:3])

# Select everything after the third element
print(vector[3:])

# Select the last element
print(vector[-1])

# Select the first two rows and all columns of a matrix
print(matrix[:2,:])

# Select all rows and the second column
print(matrix[:,1:2])

# Describing a Matrix

# Load library
import numpy as np
# Create matrix
matrix = np.array([[1, 2, 3, 4],
                   [5, 6, 7, 8],
                   [9, 10, 11, 12]])
# View number of rows and columns
print(matrix.shape)

# View number of elements (rows * columns)
print(matrix.size)

# View number of dimensions
print(matrix.ndim)

# Applying Operations to Elements

# Load library
import numpy as np
# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Create function that adds 100 to something
add_100 = lambda i: i + 100

# Create vectorized function
vectorized_add_100 = np.vectorize(add_100)

# Apply function to all elements in matrix
print(vectorized_add_100(matrix))

# OR
# Add 100 to all elements
print(matrix + 100)

# Finding the Maximum and Minimum Values

# Load library
import numpy as np
# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Return maximum element
print(np.max(matrix))

# Return minimum element
print(np.min(matrix))

# Find maximum element in each column
print(np.max(matrix, axis=0))

# Find maximum element in each row
print(np.max(matrix, axis=1))

# Calculating the Average, Variance, and Standard Deviation

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Return mean
print(np.mean(matrix))

# Return variance
print(np.var(matrix))

# Return standard deviation
print(np.std(matrix))

# Find the mean value in each column
print(np.mean(matrix, axis=0))

# Reshaping Arrays

# Load library
import numpy as np

# Create 4x3 matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9],
                   [10, 11, 12]])

# Reshape matrix into 2x6 matrix
print(matrix.reshape(2, 6))

print(matrix.reshape(1, -1))

print(matrix.reshape(12))

# Transposing a Vector or Matrix
# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Transpose matrix
print(matrix.T)

# Flattening a Matrix

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Flatten matrix
print(matrix.flatten())

# Finding the Rank of a Matrix

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 1, 1],
                   [1, 1, 10],
                   [1, 1, 15]])

# Return matrix rank
np.linalg.matrix_rank(matrix)

# Calculating the Determinant

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [2, 4, 6],
                   [3, 8, 9]])

# Return determinant of matrix
np.linalg.det(matrix)

# Getting the Diagonal of a Matrix

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [2, 4, 6],
                   [3, 8, 9]])

# Return diagonal elements
print(matrix.diagonal())

# Return diagonal one above the main diagonal
print(matrix.diagonal(offset=1))

# Return diagonal one below the main diagonal
print(matrix.diagonal(offset=-1))

# Calculating the Trace of a Matrix

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 2, 3],
                   [2, 4, 6],
                   [3, 8, 9]])

# Return trace
print(matrix.trace())

# Return diagonal and sum elements
sum(matrix.diagonal())

# Finding Eigenvalues and Eigenvectors

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, -1, 3],
                   [1, 1, 6],
                   [3, 8, 9]])

# Calculate eigenvalues and eigenvectors
eigenvalues, eigenvectors = np.linalg.eig(matrix)

# View eigenvalues
print(eigenvalues)

# View eigenvectors
print(eigenvectors)

# Calculating Dot Products

# Load library
import numpy as np

# Create two vectors
vector_a = np.array([1,2,3])
vector_b = np.array([4,5,6])

# Calculate dot product
print(np.dot(vector_a, vector_b))

# Calculate dot product
vector_a @ vector_b

# Adding and Subtracting Matrices

# Load library
import numpy as np

# Create matrix
matrix_a = np.array([[1, 1, 1],
[1, 1, 1],
[1, 1, 2]])

# Create matrix
matrix_b = np.array([[1, 3, 1],
                     [1, 3, 1],
                     [1, 3, 8]])

# Add two matrices
print(np.add(matrix_a, matrix_b))

# Add two matrices
matrix_a + matrix_b

# Multiplying Matrices

# Load library
import numpy as np

# Create matrix
matrix_a = np.array([[1, 1],
                     [1, 2]])

# Create matrix
matrix_b = np.array([[1, 3],
                     [1, 2]])

# Multiply two matrices
np.dot(matrix_a, matrix_b)

# Multiply two matrices
matrix_a @ matrix_b

# Multiply two matrices element-wise
matrix_a * matrix_b

# Inverting a Matrix

# Load library
import numpy as np

# Create matrix
matrix = np.array([[1, 4],
                   [2, 5]])

# Calculate inverse of matrix
np.linalg.inv(matrix)

# Multiply matrix and its inverse
matrix @ np.linalg.inv(matrix)

# Generating Random Values

# Load library
import numpy as np

# Set seed
np.random.seed(0)

# Generate three random floats between 0.0 and 1.0
np.random.random(3)

# Generate three random integers between 1 and 10
np.random.randint(0, 11, 3)

# Draw three numbers from a normal distribution with mean 0.0
# and standard deviation of 1.0
np.random.normal(0.0, 1.0, 3)

# Draw three numbers from a logistic distribution with mean 0.0 and scale of 1.0
np.random.logistic(0.0, 1.0, 3)

# Draw three numbers greater than or equal to 1.0 and less than 2.0
np.random.uniform(1.0, 2.0, 3)